The relationship between Laptop and Screen can best be categorized as	Inheritance	Association	Ownership	Private	c
Which one of these is not a purpose of information hiding in object-oriented programming?	To protect the values of variables from being changed inappropriately	To free other programmers from having to know too many details of the inner workings of the class.	To protect people's personal information from hackers.	To provide an opportunity to format or convert data before returning it.	c
The relationship between Bayonet and Weapon can best be described as	Inheritance	Polymorphism	Ownership	Private	a
Which of the following is not true of the relationship composition?	The owner is responsible for creating and destroying the object it owns	Other objects of the owner type can own the very same object.	It involves exclusive ownership, meaning that no other object could own the owned object.	It, like aggregation, is a form of ownership.	b
In the relationship between Hammer and Tool, which of the following is correct?	Hammer is the superclass, and Tool is the subclass.	Hammer is the subclass, and Tool is the superclass.	Hammer is the owner, and Tool is the owned.	Hammer is the owned, and Tool is the owner.	b
Which of the following is a false statement?	A class is like a blueprint, and an object is something built according to that blueprint.	A class can contain data members and methods.	A class can contain objects as data members within it.	Usually, only one object can be built for any given class.	d
Which of the following is false about an abstract class?	It contains one or more abstract functions.	You cannot create an object of an abstract class.	It cannot have any non-abstract functions.	It is the most generic version of a family of related types of things.	c
Why is polymorphism powerful?	It enables us to refer to related objects generally but still access specific functionality for each object.	It enables us to build more complicated objects starting from simpler ones.	It helps us protect data from being inadvertently changed.	It helps us build objects that contain other objects.	a
Why do we write public get and set functions?	Object-oriented languages require us to do so.	If we didn't, there would be no way to read or write the values of the data members of a class.	In combination with making data private, these public functions give us a way to read and write the values of these variables in a controlled way.	They make a program run more efficiently.	c
Which pattern tries to make it easier to create a variety of related objects?	Model-View-Controller	Factory	Delegation	b
Which pattern tries to avoid mixing the storage of data and how it is displayed?	Model-View-Controller	Factory	Delegation	a
Which pattern often uses aggregation or composition to enable an owner to perform a task by asking for help from the things it owns?	Model-View-Controller	Factory	Delegation	c
Which concepts enable the Factory pattern to be particularly useful?	Aggregation and Composition	Information Hiding and Encapsulation	Inheritance and Polymorphism	Abstraction and Ownership	d
Which of the following is a false statement?	An interface is a data type that consists entirely of abstract functions.	A class can implement multiple interfaces but extend only one class.	"extends" (i.e. inheritance) means "is a" whereas "implementing an interface" means "acts like"	Using interfaces helps a program run more efficiently.	d